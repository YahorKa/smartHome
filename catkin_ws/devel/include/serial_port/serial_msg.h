// Generated by gencpp from file serial_port/serial_msg.msg
// DO NOT EDIT!


#ifndef SERIAL_PORT_MESSAGE_SERIAL_MSG_H
#define SERIAL_PORT_MESSAGE_SERIAL_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_port
{
template <class ContainerAllocator>
struct serial_msg_
{
  typedef serial_msg_<ContainerAllocator> Type;

  serial_msg_()
    : topic_id(0)
    , topic_name()
    , message_type()
    , md5sum()
    , buffer_size(0)  {
    }
  serial_msg_(const ContainerAllocator& _alloc)
    : topic_id(0)
    , topic_name(_alloc)
    , message_type(_alloc)
    , md5sum(_alloc)
    , buffer_size(0)  {
  (void)_alloc;
    }



   typedef uint16_t _topic_id_type;
  _topic_id_type topic_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_name_type;
  _topic_name_type topic_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type_type;
  _message_type_type message_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _md5sum_type;
  _md5sum_type md5sum;

   typedef int32_t _buffer_size_type;
  _buffer_size_type buffer_size;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ID_PUBLISHER)
  #undef ID_PUBLISHER
#endif
#if defined(_WIN32) && defined(ID_SUBSCRIBER)
  #undef ID_SUBSCRIBER
#endif
#if defined(_WIN32) && defined(ID_SERVICE_SERVER)
  #undef ID_SERVICE_SERVER
#endif
#if defined(_WIN32) && defined(ID_SERVICE_CLIENT)
  #undef ID_SERVICE_CLIENT
#endif
#if defined(_WIN32) && defined(ID_PARAMETER_REQUEST)
  #undef ID_PARAMETER_REQUEST
#endif
#if defined(_WIN32) && defined(ID_LOG)
  #undef ID_LOG
#endif
#if defined(_WIN32) && defined(ID_TIME)
  #undef ID_TIME
#endif
#if defined(_WIN32) && defined(ID_TX_STOP)
  #undef ID_TX_STOP
#endif

  enum {
    ID_PUBLISHER = 0u,
    ID_SUBSCRIBER = 1u,
    ID_SERVICE_SERVER = 2u,
    ID_SERVICE_CLIENT = 4u,
    ID_PARAMETER_REQUEST = 6u,
    ID_LOG = 7u,
    ID_TIME = 10u,
    ID_TX_STOP = 11u,
  };


  typedef boost::shared_ptr< ::serial_port::serial_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_port::serial_msg_<ContainerAllocator> const> ConstPtr;

}; // struct serial_msg_

typedef ::serial_port::serial_msg_<std::allocator<void> > serial_msg;

typedef boost::shared_ptr< ::serial_port::serial_msg > serial_msgPtr;
typedef boost::shared_ptr< ::serial_port::serial_msg const> serial_msgConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_port::serial_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_port::serial_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_port::serial_msg_<ContainerAllocator1> & lhs, const ::serial_port::serial_msg_<ContainerAllocator2> & rhs)
{
  return lhs.topic_id == rhs.topic_id &&
    lhs.topic_name == rhs.topic_name &&
    lhs.message_type == rhs.message_type &&
    lhs.md5sum == rhs.md5sum &&
    lhs.buffer_size == rhs.buffer_size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_port::serial_msg_<ContainerAllocator1> & lhs, const ::serial_port::serial_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_port

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::serial_port::serial_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_port::serial_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_port::serial_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_port::serial_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_port::serial_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_port::serial_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_port::serial_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ad51f88fc44892f8c10684077646005";
  }

  static const char* value(const ::serial_port::serial_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ad51f88fc44892fULL;
  static const uint64_t static_value2 = 0x8c10684077646005ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_port::serial_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_port/serial_msg";
  }

  static const char* value(const ::serial_port::serial_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_port::serial_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 ID_PUBLISHER=0\n"
"uint16 ID_SUBSCRIBER=1\n"
"uint16 ID_SERVICE_SERVER=2\n"
"uint16 ID_SERVICE_CLIENT=4\n"
"uint16 ID_PARAMETER_REQUEST=6\n"
"uint16 ID_LOG=7\n"
"uint16 ID_TIME=10\n"
"uint16 ID_TX_STOP=11\n"
"uint16 topic_id\n"
"string topic_name\n"
"string message_type\n"
"string md5sum\n"
"int32 buffer_size\n"
;
  }

  static const char* value(const ::serial_port::serial_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_port::serial_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.topic_id);
      stream.next(m.topic_name);
      stream.next(m.message_type);
      stream.next(m.md5sum);
      stream.next(m.buffer_size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct serial_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_port::serial_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_port::serial_msg_<ContainerAllocator>& v)
  {
    s << indent << "topic_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.topic_id);
    s << indent << "topic_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topic_name);
    s << indent << "message_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message_type);
    s << indent << "md5sum: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.md5sum);
    s << indent << "buffer_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.buffer_size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_PORT_MESSAGE_SERIAL_MSG_H
